@page "/dashboard"
@using ManPowerCore.Common
@using ManPowerCore.Controller
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStore
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<div id="main">
    <div class="wizard-heading">Dashboard</div>
    @*<div class="row justify-content-evenly"  >

    <div class="col-4">
    <RadzenCard Style="height:170px; background-color :#d4fcdf">
    <center> <h3> No of Employees </h3>
    <RadzenCard  Style="width: 30%;">
    <h5>12</h5>
    </RadzenCard>
    </center>

    </RadzenCard>
    </div>

    <div class="col-4">
    <RadzenCard Style="height:170px; background-color :#d4fcdf">
    <center> <h3> This month Target </h3>
    <RadzenCard  Style="width: 30%;">
    <h5>28</h5>
    </RadzenCard>
    </center>
    </RadzenCard>
    </div>

    <div class="col-4">
    <RadzenCard Style="height:170px;background-color :#d4fcdf">
    <center> <h3> This month Target Acheivment </h3>
    <RadzenCard  Style="width: 30%;">
    <h5>42%</h5>
    </RadzenCard>
    </center>
    </RadzenCard>
    </div>

    </div>
    <br />
    <h4 style="font-weight:bold;">Programme summery 2022</h4><br/>
    <div class="row justify-content-evenly">

    <div class="col-4">
    <RadzenCard Style="height:170px;background-color :#d4fcdf">
    <center> <h3>Total Programmes </h3>
    <RadzenCard  Style="width: 30%;">
    <h5>17</h5>
    </RadzenCard>
    </center>
    </RadzenCard>
    </div>

    <div class="col-4">
    <RadzenCard Style="height:170px; background-color :#d4fcdf">
    <center><h3>Pending programmes </h3>
    <RadzenCard  Style="width: 30%;">
    <h5></h5>
    </RadzenCard>
    </center>
    </RadzenCard>
    </div>
    </div>

    <br/>
    <br/>
    <br/>*@
    @*-----------------------------------------------------------------*@

    <div class="row justify-content-evenly">

        <div class="col-xl-3 col-sm-6 mb-3">
            <div class="card text-white bg-primary o-hidden h-100">
                <div class="card-body">
                    <div class="card-body-icon">
                        <i class="fas fa-fw fa-comments"></i>
                    </div>
                    <center>
                        No of Employees
                        <br />@systemUserList.Count()
                    </center>
                </div>
                <a class="card-footer text-white clearfix small z-1" href="">
                    @*<span class="float-left">This Month Targets</span>
                    <span class="float-right">
                    <i class="fas fa-angle-right"></i>
                    </span>*@
                </a>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6 mb-3">
            <div class="card text-white bg-warning o-hidden h-100">
                <div class="card-body">
                    <div class="card-body-icon">
                        <i class="fas fa-fw fa-list"></i>
                    </div>
                    <center>
                        This month Targets
                        <br />
                        @foreach (var i in programTargetsList)
                        {
                            @if (i.TargetMonth == DateTime.Today.Month)
                            {
                                mCount++;
                            }
                        }
                        @mCount
                    </center>
                </div>
                <a class="card-footer text-white clearfix small z-1" href="">
                    @*<span class="float-left">View Details</span>
                    <span class="float-right">
                    <i class="fas fa-angle-right"></i>
                    </span>*@
                </a>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6 mb-3">
            <div class="card text-white bg-success o-hidden h-100">
                <div class="card-body">
                    <div class="card-body-icon">
                        <i class="fas fa-fw fa-shopping-cart"></i>
                    </div>
                    This month Target Acheivment
                    <br />
                    2%
                    @* @foreach (var item in taskAllocationDetail.Where(u => u.StartTime.Month == DateTime.Today.Month))
                    {
                    @if (item.StartTime < DateTime.Today)
                    {
                    x++;
                    }


                    y++;

                    }

                    pesentage = ((x/y)*100);
                    @pesentage*@
                </div>
                <a class="card-footer text-white clearfix small z-1" href="">

                </a>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6 mb-3">
            <div class="card text-white bg-danger o-hidden h-100">
                <div class="card-body">
                    <div class="card-body-icon">
                        <i class="fas fa-fw fa-life-ring"></i>
                    </div>
                    <center>
                        Total Programmes
                        <br />
                        17

                    </center>
                </div>
                <a class="card-footer text-white clearfix small z-1" href="">

                </a>
            </div>

        </div>

        @*=--------------------------------------------------------*@


        <div class="row justify-content-evenly">

            @*<div class="col-xl-3 col-sm-6 mb-3">
            <div class="card text-white bg-primary o-hidden h-100">
            <div class="card-body">
            <div class="card-body-icon">
            <i class="fas fa-fw fa-comments"></i>
            </div>
            <center>
            No of Employees
            <br />@systemUserList.Count()
            </center>
            </div>
            <a class="card-footer text-white clearfix small z-1" href="">

            </a>
            </div>
            </div>
            <div class="col-xl-3 col-sm-6 mb-3">
            <div class="card text-white bg-warning o-hidden h-100">
            <div class="card-body">
            <div class="card-body-icon">
            <i class="fas fa-fw fa-list"></i>
            </div>
            <center>
            This month Targets
            <br />
            @foreach (var i in programTargetsList)
            {
            @if (i.TargetMonth == DateTime.Today.Month)
            {
            mCount++;
            }
            }
            @mCount
            </center>
            </div>
            <a class="card-footer text-white clearfix small z-1" href="">

            </a>
            </div>
            </div>
            <div class="col-xl-3 col-sm-6 mb-3">
            <div class="card text-white bg-success o-hidden h-100">
            <div class="card-body">
            <div class="card-body-icon">
            <i class="fas fa-fw fa-shopping-cart"></i>
            </div>
            This month Target Acheivment
            </div>
            <a class="card-footer text-white clearfix small z-1" href="">

            </a>
            </div>
            </div>
            <div class="col-xl-3 col-sm-6 mb-3">
            <div class="card text-white bg-danger o-hidden h-100">
            <div class="card-body">
            <div class="card-body-icon">
            <i class="fas fa-fw fa-life-ring"></i>
            </div>
            <center>
            Total Programmes
            <br />

            </center>
            </div>
            <a class="card-footer text-white clearfix small z-1" href="">

            </a>
            </div>

            </div>*@




            <div class="calend">
                <br />
                <br />
                <br />
                <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
                                 TextProperty="Text" SelectedIndex="2"
                                 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
                    <RadzenDayView />
                    <RadzenWeekView />
                    <RadzenMonthView />
                </RadzenScheduler>
            </div>

            <br />
            <br />
            <br />




        </div>
        <br /><br />
        <br />
        <br />
        <div class="row justify-content-evenly">

            <div class="col-6">
                <RadzenCard Style="height:170px;background-color :#d4fcdf">
                    <center> <h3>Delayed Subbmissions </h3> </center>

                </RadzenCard>
            </div>

            <div class="col-6">
                <RadzenCard Style="height:170px; background-color :#d4fcdf">
                    <center><h3>Todays Programme </h3></center>

                </RadzenCard>
            </div>
        </div>
    </div>
</div>



@code {
    int mCount = 0;
    int totalCount = 0;
    int pendingCount = 0;
    int x = 0;
    int y = 0;
    float pesentage = 0;

    RadzenScheduler<Appointment> scheduler;
    List<ManPowerCore.Domain.TaskAllocationDetail> taskAllocationDetail = new List<ManPowerCore.Domain.TaskAllocationDetail>();

    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<Appointment> appointments = new List<Appointment>();

    List<ProgramTarget> programTargetsList = new List<ProgramTarget>();
    List<SystemUser> systemUserList = new List<SystemUser>();


    protected override void OnInitialized()
    {

        base.OnInitialized();


        ProgramTargetController programTargetController = ControllerFactory.CreateProgramTargetController();
        programTargetsList = programTargetController.GetAllProgramTarget(false, false, false, false);

        SystemUserController systemUserController = ControllerFactory.CreateSystemUserController();
        systemUserList = systemUserController.GetAllSystemUser(false, false, false);


        TaskAllocationDetailController taskAllocationDetailController = ControllerFactory.CreateTaskAllocationDetailController();
        taskAllocationDetail = taskAllocationDetailController.GetAllTaskAllocationDetail(false, false, false);

        foreach (var item in taskAllocationDetail)
        {

            appointments.Add(new Appointment()
                {
                    Start = item.StartTime,
                    End = item.EndTime,
                    Text = item.TaskDescription
                });


        }


    }




    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {


        Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
            new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

        if (data != null)
        {
            appointments.Add(data);
            // Either call the Reload method or reassign the Data property of the Scheduler
            await scheduler.Reload();
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {


        await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }

    public class Appointment
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Text { get; set; }
    }

    Appointment[] data = new Appointment[]
    {
      new Appointment
      {
        Start = DateTime.Today,
        End = DateTime.Today.AddDays(1),
        Text = "Birthday"
      },


    };


    string user;
    public SystemUser userRegistationDetailsList;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userRegistationDetailsList = await sessionStorage.GetItemAsync<SystemUser>("UserDetails");
            user = userRegistationDetailsList.Name;


            StateHasChanged();
        }

    }

}
